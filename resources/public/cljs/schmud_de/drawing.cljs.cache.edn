;; Analyzed by ClojureScript 1.7.48
{:use-macros nil, :excludes #{}, :name schmud-de.drawing, :imports nil, :requires nil, :uses nil, :defs {line-join-points {:protocol-inline nil, :meta {:file "/home/schmudde/code/playground/schmud-de/src/schmud_de/drawing.cljs", :line 3, :column 7, :end-line 3, :end-column 23, :arglists (quote ([interleaved-points] [xs ys] [xs ys zs])), :doc "Takes either a seq of x y (and z) point coords tuples or two\n  separate lists of x and y (and z) coords independently and creates a\n  lazy list of line args (vectors of 4 (or 6) elements) suitable for\n  use with the line fn.\n\n  (line-join-points [1 2 3] [4 5 6])     ;=> ([1 4 2 5] [2 5 3 6])\n  (line-join-points [[1 4] [2 5] [3 6]]) ;=> ([1 4 2 5] [2 5 3 6])\n  (line-join-points [[1 4 0] [2 5 1] [3 6 2]]) ;=> ([1 4 0 2 5 1]\n                                                    [2 5 1 3 6 2])\n  (line-join-points [1 2 3] [4 5 6] [0 1 2])   ;=> ([1 4 0 2 5 1]\n                                                    [2 5 1 3 6 2])", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([interleaved-points] [xs ys] [xs ys zs]), :arglists ([interleaved-points] [xs ys] [xs ys zs]), :arglists-meta (nil nil nil)}}, :name schmud-de.drawing/line-join-points, :variadic false, :file "src/schmud_de/drawing.cljs", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([interleaved-points] [xs ys] [xs ys zs]), :arglists ([interleaved-points] [xs ys] [xs ys zs]), :arglists-meta (nil nil nil)}, :method-params ([interleaved-points] [xs ys] [xs ys zs]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 3, :end-line 3, :max-fixed-arity 3, :fn-var true, :arglists ([interleaved-points] [xs ys] [xs ys zs]), :doc "Takes either a seq of x y (and z) point coords tuples or two\n  separate lists of x and y (and z) coords independently and creates a\n  lazy list of line args (vectors of 4 (or 6) elements) suitable for\n  use with the line fn.\n\n  (line-join-points [1 2 3] [4 5 6])     ;=> ([1 4 2 5] [2 5 3 6])\n  (line-join-points [[1 4] [2 5] [3 6]]) ;=> ([1 4 2 5] [2 5 3 6])\n  (line-join-points [[1 4 0] [2 5 1] [3 6 2]]) ;=> ([1 4 0 2 5 1]\n                                                    [2 5 1 3 6 2])\n  (line-join-points [1 2 3] [4 5 6] [0 1 2])   ;=> ([1 4 0 2 5 1]\n                                                    [2 5 1 3 6 2])"}, last-x-point {:protocol-inline nil, :meta {:file "/home/schmudde/code/playground/schmud-de/src/schmud_de/drawing.cljs", :line 33, :column 7, :end-line 33, :end-column 19, :arglists (quote ([line]))}, :name schmud-de.drawing/last-x-point, :variadic false, :file "src/schmud_de/drawing.cljs", :end-column 19, :method-params ([line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([line]))}, line-decomposer {:protocol-inline nil, :meta {:file "/home/schmudde/code/playground/schmud-de/src/schmud_de/drawing.cljs", :line 38, :column 7, :end-line 38, :end-column 22, :arglists (quote ([line-segment]))}, :name schmud-de.drawing/line-decomposer, :variadic false, :file "src/schmud_de/drawing.cljs", :end-column 22, :method-params ([line-segment]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([line-segment]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:y1 :x1 :y2 :x2}, :order [:x1 :y1 :x2 :y2]}, :doc nil}